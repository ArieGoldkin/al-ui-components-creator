name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  ci:
    name: CI
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: 🐍 Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: "9.0.0"
          run_install: false

      - name: 🗄️ Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            ~/.cache/pip
          key: ${{ runner.os }}-deps-${{ hashFiles('**/pnpm-lock.yaml', '**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      # Frontend checks
      - name: 📦 Install frontend dependencies
        working-directory: ./frontend
        run: pnpm install --frozen-lockfile

      - name: 🔍 TypeScript type checking
        working-directory: ./frontend
        run: pnpm run type-check

      - name: 🧹 ESLint linting
        working-directory: ./frontend
        run: pnpm run lint

      - name: 🏗️ Build frontend
        working-directory: ./frontend
        run: pnpm run build

      # Backend checks
      - name: 📦 Install backend dependencies
        working-directory: ./backend
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🚀 Validate Flask app startup
        working-directory: ./backend
        env:
          FLASK_ENV: testing
          ANTHROPIC_API_KEY: test_key_for_ci
        run: |
          python -c "
          import sys
          sys.path.append('.')
          try:
              from app import app
              print('✅ Flask app imported successfully')
              with app.test_client() as client:
                  response = client.get('/health')
                  print(f'✅ Health endpoint responded with status: {response.status_code}')
          except Exception as e:
              print(f'❌ Flask app startup failed: {e}')
              sys.exit(1)
          "

      - name: 🧪 Run backend tests
        working-directory: ./backend
        run: |
          if [ -f "test_app.py" ]; then
            pytest test_app.py -v
          else
            echo "ℹ️ No backend tests found"
          fi
